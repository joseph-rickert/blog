<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roland&#39;s Blog</title>
    <link>/</link>
    <description>Recent content on Roland&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>In-database xgboost predictions with R</title>
      <link>/2018/10/18/in-database-xgboost-predictions-with-r.html</link>
      <pubDate>Thu, 18 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/10/18/in-database-xgboost-predictions-with-r.html</guid>
      <description>edit
xgboost(docs) is a popular R package for classification and regression, and the model of choice in many winning Kaggle competitions. Moving xgboost into a large-scale production environment, however, can lead to challenges when attempting to calculate predictions (“scores”) for large datasets. We present a novel solution for calculating batch predictions without having to transfer features stored in a database to the machine where the model is located; instead we convert the model predictions into SQL commands and thereby transfer the scoring process to the database.</description>
    </item>
    
    <item>
      <title>Cost Effective Partitioning in BigQuery with R</title>
      <link>/2018/05/02/cost-effective-partitioning-in-bigquery-with-r.html</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/05/02/cost-effective-partitioning-in-bigquery-with-r.html</guid>
      <description>edit
Introduction Companies using Google BigQuery for production analytics often run into the following problem: the company has a large user hit table that spans many years. Since queries are billed based on the fields accessed, and not on the date-ranges queried, queries on the table are billed for all available days and are increasingly wasteful.
Partitioning Tables
 A solution is to partition the table by date, so that users can query a particular range of dates; saving costs and decreasing query duration.</description>
    </item>
    
  </channel>
</rss>